2024-06-29 14:06:37.277320+02:00 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ARTICLE" not found (this database is empty); SQL statement:
select * from article [42104-224]
2024-06-29 14:06:52.950567+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ARTICLE" not found (this database is empty); SQL statement:
insert into article (created,text,title,updated,id) values (?,?,?,?,?) [42104-224]
2024-06-29 14:26:58.122694+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table ARTICLE (ID uuid [*]identity primary key, TITLE text not null, TEXT text not null, CREATED timestamp, UPDATED timestamp)"; ожидалось "ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table ARTICLE (ID uuid [*]identity primary key, TITLE text not null, TEXT text not null, CREATED timestamp, UPDATED timestamp)"; expected "ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"; SQL statement:
create table ARTICLE (ID uuid identity primary key, TITLE text not null, TEXT text not null, CREATED timestamp, UPDATED timestamp) [42001-224]
2024-06-29 14:31:13.544883+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table ARTICLE ( `ID` uuid primary key not null [*]default random_uuid(), `TITLE` text not null, `TEXT` text not null, `CREATED` timestamp, `UPDATED` timestamp)"; ожидалось "CONSTRAINT, COMMENT, UNIQUE, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table ARTICLE ( `ID` uuid primary key not null [*]default random_uuid(), `TITLE` text not null, `TEXT` text not null, `CREATED` timestamp, `UPDATED` timestamp)"; expected "CONSTRAINT, COMMENT, UNIQUE, CHECK, REFERENCES, ,, )"; SQL statement:
create table ARTICLE ( `ID` uuid primary key not null default random_uuid(), `TITLE` text not null, `TEXT` text not null, `CREATED` timestamp, `UPDATED` timestamp) [42001-224]
2024-06-29 14:35:22.467073+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table ARTICLE ( `ID` UUID primary key not null [*]default random_uuid(), `TITLE` TEXT not null, `TEXT` TEXT not null, `CREATED` TIMESTAMP WITH TIME ZONE, `UPDATED` TIMESTAMP WITH TIME ZONE)"; ожидалось "CONSTRAINT, COMMENT, UNIQUE, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table ARTICLE ( `ID` UUID primary key not null [*]default random_uuid(), `TITLE` TEXT not null, `TEXT` TEXT not null, `CREATED` TIMESTAMP WITH TIME ZONE, `UPDATED` TIMESTAMP WITH TIME ZONE)"; expected "CONSTRAINT, COMMENT, UNIQUE, CHECK, REFERENCES, ,, )"; SQL statement:
create table ARTICLE ( `ID` UUID primary key not null default random_uuid(), `TITLE` TEXT not null, `TEXT` TEXT not null, `CREATED` TIMESTAMP WITH TIME ZONE, `UPDATED` TIMESTAMP WITH TIME ZONE) [42001-224]
2024-06-29 14:52:01.186521+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table ARTICLE ( `ID` UUID primary key not null [*]default random_uuid(), `TITLE` TEXT not null, `TEXT` TEXT not null, `CREATED` TIMESTAMP WITH TIME ZONE, `UPDATED` TIMESTAMP WITH TIME ZONE)"; ожидалось "CONSTRAINT, COMMENT, UNIQUE, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table ARTICLE ( `ID` UUID primary key not null [*]default random_uuid(), `TITLE` TEXT not null, `TEXT` TEXT not null, `CREATED` TIMESTAMP WITH TIME ZONE, `UPDATED` TIMESTAMP WITH TIME ZONE)"; expected "CONSTRAINT, COMMENT, UNIQUE, CHECK, REFERENCES, ,, )"; SQL statement:
create table ARTICLE ( `ID` UUID primary key not null default random_uuid(), `TITLE` TEXT not null, `TEXT` TEXT not null, `CREATED` TIMESTAMP WITH TIME ZONE, `UPDATED` TIMESTAMP WITH TIME ZONE) [42001-224]
2024-06-29 14:57:06.079918+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table ARTICLE ( ID UUID primary key [*]default uuid_generate_v4(), TITLE TEXT not null, TEXT TEXT not null, CREATED TIMESTAMP WITH TIMEZONE, UPDATED TIMESTAMP WITH TIMEZONE)"; ожидалось "HASH, CONSTRAINT, COMMENT, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table ARTICLE ( ID UUID primary key [*]default uuid_generate_v4(), TITLE TEXT not null, TEXT TEXT not null, CREATED TIMESTAMP WITH TIMEZONE, UPDATED TIMESTAMP WITH TIMEZONE)"; expected "HASH, CONSTRAINT, COMMENT, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"; SQL statement:
create table ARTICLE ( ID UUID primary key default uuid_generate_v4(), TITLE TEXT not null, TEXT TEXT not null, CREATED TIMESTAMP WITH TIMEZONE, UPDATED TIMESTAMP WITH TIMEZONE) [42001-224]
2024-06-29 14:57:41.274067+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table ARTICLE ( ID UUID primary key, TITLE TEXT not null, TEXT TEXT not null, CREATED TIMESTAMP [*]WITH TIMEZONE, UPDATED TIMESTAMP WITH TIMEZONE)"; ожидалось "(, WITH TIME ZONE, WITHOUT TIME ZONE, ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table ARTICLE ( ID UUID primary key, TITLE TEXT not null, TEXT TEXT not null, CREATED TIMESTAMP [*]WITH TIMEZONE, UPDATED TIMESTAMP WITH TIMEZONE)"; expected "(, WITH TIME ZONE, WITHOUT TIME ZONE, ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"; SQL statement:
create table ARTICLE ( ID UUID primary key, TITLE TEXT not null, TEXT TEXT not null, CREATED TIMESTAMP WITH TIMEZONE, UPDATED TIMESTAMP WITH TIMEZONE) [42001-224]
2024-06-29 15:00:43.600439+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table T_ACCOUNT (ID integer [*]identity primary key, NUMBER varchar(9), NAME varchar(50) not null, unique(NUMBER))"; ожидалось "ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table T_ACCOUNT (ID integer [*]identity primary key, NUMBER varchar(9), NAME varchar(50) not null, unique(NUMBER))"; expected "ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"; SQL statement:
create table T_ACCOUNT (ID integer identity primary key, NUMBER varchar(9), NAME varchar(50) not null, unique(NUMBER)) [42001-224]
2024-06-29 15:01:40.890454+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table T_ACCOUNT (ID integer [*]identity primary key)"; ожидалось "ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table T_ACCOUNT (ID integer [*]identity primary key)"; expected "ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"; SQL statement:
create table T_ACCOUNT (ID integer identity primary key) [42001-224]
2024-06-29 15:02:55.434995+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table T_ACCOUNT (ID integer [*]identity PRIMARY KEY)"; ожидалось "ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table T_ACCOUNT (ID integer [*]identity PRIMARY KEY)"; expected "ARRAY, INVISIBLE, VISIBLE, NOT NULL, DEFAULT, GENERATED, ON UPDATE, NOT NULL, DEFAULT ON NULL, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"; SQL statement:
create table T_ACCOUNT (ID integer identity PRIMARY KEY) [42001-224]
2024-06-29 15:03:59.196930+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "T_ACCOUNT" уже существует
Table "T_ACCOUNT" already exists; SQL statement:
create table T_ACCOUNT (ID UUID PRIMARY KEY) [42101-224]
2024-06-29 15:08:27.186103+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table ARTICLE ( ID UUID PRIMARY KEY [*]DEFAULT random_uuid(), TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE )"; ожидалось "HASH, CONSTRAINT, COMMENT, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table ARTICLE ( ID UUID PRIMARY KEY [*]DEFAULT random_uuid(), TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE )"; expected "HASH, CONSTRAINT, COMMENT, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"; SQL statement:
create table ARTICLE ( ID UUID PRIMARY KEY DEFAULT random_uuid(), TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE ) [42001-224]
2024-06-29 15:09:19.715196+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "create table ARTICLE ( ID UUID PRIMARY KEY [*]DEFAULT RANDOM_UUID(), TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE )"; ожидалось "HASH, CONSTRAINT, COMMENT, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"
Syntax error in SQL statement "create table ARTICLE ( ID UUID PRIMARY KEY [*]DEFAULT RANDOM_UUID(), TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE )"; expected "HASH, CONSTRAINT, COMMENT, UNIQUE, NOT NULL, CHECK, REFERENCES, ,, )"; SQL statement:
create table ARTICLE ( ID UUID PRIMARY KEY DEFAULT RANDOM_UUID(), TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE ) [42001-224]
2024-06-29 15:12:41.426428+02:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "select * [*]article"
Syntax error in SQL statement "select * [*]article"; SQL statement:
select * article [42000-224]
2024-07-07 10:02:59.388314+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Таблица "AUTHOR" не найдена
Table "AUTHOR" not found; SQL statement:
create table ARTICLE ( ID UUID PRIMARY KEY, TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE, AUTHOR_ID INT NOT NULL, CONSTRAINT FK_ARTICLE_AUTHOR FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID) ) [42102-224]
2024-07-07 10:33:50.425704+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "AUTHOR_ID" не найден
Column "AUTHOR_ID" not found; SQL statement:
create table ARTICLE ( ID UUID PRIMARY KEY, TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE, AUTHOR_ID INT NOT NULL, CONSTRAINT FK_ARTICLE_AUTHOR FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID) ) [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:184)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:219)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:74)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.ddl.CommandWithColumns.createConstraints(CommandWithColumns.java:83)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:134)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:256)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:262)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.xevgnov.n.plus.one.Application.main(Application.java:10)
2024-07-07 10:36:42.002050+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "AUTHOR_ID" не найден
Column "AUTHOR_ID" not found; SQL statement:
create table ARTICLE ( ID UUID PRIMARY KEY, TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE, AUTHOR_ID INT NOT NULL, CONSTRAINT FK_ARTICLE_AUTHOR FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID) ) [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:184)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:219)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:74)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.ddl.CommandWithColumns.createConstraints(CommandWithColumns.java:83)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:134)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:256)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:262)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.xevgnov.n.plus.one.Application.main(Application.java:10)
2024-07-07 10:44:39.978644+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "AUTHOR_ID" не найден
Column "AUTHOR_ID" not found; SQL statement:
create table ARTICLE ( ID UUID PRIMARY KEY, TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE, AUTHOR_ID INT NOT NULL, CONSTRAINT FK_ARTICLE_AUTHOR FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID) ) [42122-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:759)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:184)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:219)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:74)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.ddl.CommandWithColumns.createConstraints(CommandWithColumns.java:83)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:134)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:256)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:262)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.xevgnov.n.plus.one.Application.main(Application.java:10)
2024-07-07 10:54:12.755500+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Значения типов данных "INTEGER" и "UUID" не сравнимы друг с другом
Values of types "INTEGER" and "UUID" are not comparable; SQL statement:
create table ARTICLE ( ID UUID PRIMARY KEY, TITLE TEXT NOT NULL, TEXT TEXT NOT NULL, CREATED TIMESTAMP WITH TIME ZONE, UPDATED TIMESTAMP WITH TIME ZONE, AUTHOR_ID INT NOT NULL, CONSTRAINT FK_ARTICLE_AUTHOR FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(ID) ) [90110-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.value.TypeInfo.checkComparable(TypeInfo.java:766)
	at org.h2.expression.condition.Comparison.optimize(Comparison.java:167)
	at org.h2.expression.Expression.optimizeCondition(Expression.java:148)
	at org.h2.command.query.Select.prepareExpressions(Select.java:1177)
	at org.h2.command.query.Query.prepare(Query.java:218)
	at org.h2.expression.condition.PredicateWithSubquery.optimize(PredicateWithSubquery.java:37)
	at org.h2.expression.condition.ExistsPredicate.optimize(ExistsPredicate.java:16)
	at org.h2.expression.condition.ConditionNot.optimize(ConditionNot.java:54)
	at org.h2.expression.Expression.optimizeCondition(Expression.java:148)
	at org.h2.command.query.Select.prepareExpressions(Select.java:1177)
	at org.h2.command.query.Query.prepare(Query.java:218)
	at org.h2.command.Parser.prepare(Parser.java:452)
	at org.h2.engine.SessionLocal.prepare(SessionLocal.java:589)
	at org.h2.engine.SessionLocal.prepare(SessionLocal.java:573)
	at org.h2.constraint.ConstraintReferential.checkExistingData(ConstraintReferential.java:610)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:288)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:74)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.ddl.CommandWithColumns.createConstraints(CommandWithColumns.java:83)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:134)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:256)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:262)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.xevgnov.n.plus.one.Application.main(Application.java:10)
